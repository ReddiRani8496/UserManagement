{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:8080\";\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL\n});\n\n// Add an interceptor to handle expired tokens\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error is due to an expired access token\n  if (error.response.status === 401 && error.response.data.message === \"Expired JWT\" && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Get the refresh token from localStorage\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n\n      // Request a new access token using the refresh token\n      const {\n        data\n      } = await axios.post(`${BASE_URL}/auth/refresh`, {\n        token: refreshToken\n      });\n\n      // Save the new access token in localStorage\n      localStorage.setItem(\"token\", data.token);\n\n      // Retry the original request with the new access token\n      originalRequest.headers[\"Authorization\"] = `Bearer ${data.token}`;\n      return axiosInstance(originalRequest);\n    } catch (err) {\n      console.error(\"Failed to refresh token:\", err);\n      // Redirect to login if refresh fails\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","interceptors","response","use","error","originalRequest","config","status","data","message","_retry","refreshToken","localStorage","getItem","post","token","setItem","headers","err","console","window","location","href","Promise","reject"],"sources":["/home/reddirani/Desktop/UserManagement/users-management/src/components/service/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"http://localhost:8080\";\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n});\n\n// Add an interceptor to handle expired tokens\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Check if the error is due to an expired access token\n    if (\n      error.response.status === 401 &&\n      error.response.data.message === \"Expired JWT\" &&\n      !originalRequest._retry\n    ) {\n      originalRequest._retry = true;\n\n      try {\n        // Get the refresh token from localStorage\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n\n        // Request a new access token using the refresh token\n        const { data } = await axios.post(`${BASE_URL}/auth/refresh`, {\n          token: refreshToken,\n        });\n\n        // Save the new access token in localStorage\n        localStorage.setItem(\"token\", data.token);\n\n        // Retry the original request with the new access token\n        originalRequest.headers[\"Authorization\"] = `Bearer ${data.token}`;\n        return axiosInstance(originalRequest);\n      } catch (err) {\n        console.error(\"Failed to refresh token:\", err);\n        // Redirect to login if refresh fails\n        window.location.href = \"/login\";\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AACxC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,aAAa,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CACpCD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EACf,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;;EAEpC;EACA,IACEF,KAAK,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAC7BH,KAAK,CAACF,QAAQ,CAACM,IAAI,CAACC,OAAO,KAAK,aAAa,IAC7C,CAACJ,eAAe,CAACK,MAAM,EACvB;IACAL,eAAe,CAACK,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;MAEzD;MACA,MAAM;QAAEL;MAAK,CAAC,GAAG,MAAMZ,KAAK,CAACkB,IAAI,CAAC,GAAGjB,QAAQ,eAAe,EAAE;QAC5DkB,KAAK,EAAEJ;MACT,CAAC,CAAC;;MAEF;MACAC,YAAY,CAACI,OAAO,CAAC,OAAO,EAAER,IAAI,CAACO,KAAK,CAAC;;MAEzC;MACAV,eAAe,CAACY,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUT,IAAI,CAACO,KAAK,EAAE;MACjE,OAAOjB,aAAa,CAACO,eAAe,CAAC;IACvC,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZC,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEc,GAAG,CAAC;MAC9C;MACAE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACpB,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeN,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}